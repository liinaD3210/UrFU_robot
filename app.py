import streamlit as st
import os
import re
import docx2txt
from typing import List, TypedDict

from dotenv import load_dotenv
from langchain_core.documents import Document
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain_community.vectorstores import FAISS
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langgraph.graph import StateGraph, END
from langchain_core.pydantic_v1 import BaseModel, Field

# --- 1. –ó–ê–ì–†–£–ó–ö–ê –ò –ù–ê–°–¢–†–û–ô–ö–ê ---

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (GOOGLE_API_KEY)
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(page_title="–ì–∏–¥ –ø–æ –ò–†–ò–¢-–†–¢–§", page_icon="ü§ñ", layout="wide")
st.title("–ê–≥–µ–Ω—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –ò–†–ò–¢-–†–¢–§")
st.caption("–Ø –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.")


# --- 2. –ü–ê–†–°–ò–ù–ì –î–ê–ù–ù–´–• –ò –°–û–ó–î–ê–ù–ò–ï RETRIEVER ---

@st.cache_resource(show_spinner="–ó–∞–≥—Ä—É–∂–∞—é –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
def load_and_index_data(file_path: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç DOCX —Ñ–∞–π–ª, –ø–∞—Ä—Å–∏—Ç –µ–≥–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π retriever (–ø–æ–∏—Å–∫–æ–≤–∏–∫).
    """
    if not os.path.exists(file_path):
        st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}")
        st.stop()

    text = docx2txt.process(file_path)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º regex –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –∫–æ–¥—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (e.g., 09.03.01)
    # re.S (dotall) –ø–æ–∑–≤–æ–ª—è–µ—Ç '.' —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
    chunks = re.findall(r'(\d{2}\.\d{2}\.\d{2}.*?)(?=\d{2}\.\d{2}\.\d{2}|\Z)', text, re.S)

    documents = []
    for chunk in chunks:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞) –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        title = chunk.split('\n', 1)[0].strip()
        doc = Document(page_content=chunk, metadata={"source": title})
        documents.append(doc)

    if not documents:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
        st.stop()

    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ Google
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")

    # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É FAISS –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    vectorstore = FAISS.from_documents(documents, embeddings)

    # –°–æ–∑–¥–∞–µ–º retriever, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–æ 3 —Å–∞–º—ã—Ö –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    retriever = vectorstore.as_retriever(search_kwargs={"k": 3})
    return retriever, documents

# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö. –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä—É–µ—Ç—Å—è.
retriever, all_documents = load_and_index_data("data/irit_rtf_baccalaureate_info.docx")



# --- 3. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ì–†–ê–§–ê –î–ò–ê–õ–û–ì–ê (LANGGRAPH) ---

class GraphState(TypedDict):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—à–µ–≥–æ –≥—Ä–∞—Ñ–∞"""
    original_question: str # –ù–æ–≤—ã–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    question: str          # –¢–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –≤–æ–ø—Ä–æ—Å
    documents: List[Document] # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    generation: str        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LLM –æ—Ç–≤–µ—Ç
    clarification_needed: bool # –§–ª–∞–≥, –Ω—É–∂–Ω–æ –ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM
llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash", temperature=0, convert_system_message_to_human=True)

# --- –£–∑–ª—ã –≥—Ä–∞—Ñ–∞ ---

# --- –£–∑–ª—ã –≥—Ä–∞—Ñ–∞ ---

def retrieve_docs(state: GraphState) -> GraphState:
    """
    –£–∑–µ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    –≠–¢–û–¢ –£–ó–ï–õ –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è.
    """
    print("--- –£–ó–ï–õ: –ü–û–ò–°–ö –î–û–ö–£–ú–ï–ù–¢–û–í (—Å –ª–æ–≥–∏–∫–æ–π —É—Ç–æ—á–Ω–µ–Ω–∏—è) ---")
    question = state["question"]
    
    # --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–æ—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
    # –ú—ã –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö) –≤ —Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∞.
    # –≠—Ç–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º.
    for doc in all_documents:
        # doc.metadata['source'] —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "11.03.01 –†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞"
        doc_title = doc.metadata.get("source", "")
        if doc_title and doc_title.lower() in question.lower():
            print(f"--- –ù–ê–ô–î–ï–ù–û –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –ü–û –ù–ê–ó–í–ê–ù–ò–Æ: {doc_title} ---")
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏, —Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫, –∞ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ—Ç –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç.
            # –≠—Ç–æ –∏ –µ—Å—Ç—å –∫–ª—é—á –∫ —Ä–∞–∑—Ä—ã–≤—É —Ü–∏–∫–ª–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–π.
            documents = [doc]
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–µ–π—Ç–∞
            return {
                "documents": documents,
                "question": question,
                "generation": "",
                "clarification_needed": False
            }
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —ç—Ç–æ –ø–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫.
    print("--- –¢–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è—é –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É ---")
    documents = retriever.invoke(question)
    return {
        "documents": documents,
        "question": question,
        "original_question": question,
        "generation": "",
        "clarification_needed": False
    }

from langchain_core.pydantic_v1 import BaseModel, Field

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
class RelevanceGrade(BaseModel):
    """–ë–∏–Ω–∞—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–æ–ø—Ä–æ—Å—É."""
    score: str = Field(description="–û—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, 'yes' –∏–ª–∏ 'no'.")

# LLM —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏
structured_llm_grader = llm.with_structured_output(RelevanceGrade)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥—Ä–µ–π–¥–µ—Ä–∞
grader_prompt = ChatPromptTemplate.from_messages(
    [
        ("system", "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ 'yes' –∏–ª–∏ 'no'."),
        ("human", "–î–æ–∫—É–º–µ–Ω—Ç:\n\n{document}\n\n–í–æ–ø—Ä–æ—Å: {question}"),
    ]
)

relevance_grader = grader_prompt | structured_llm_grader

def grade_documents(state: GraphState) -> GraphState:
    """
    –£–∑–µ–ª –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    - –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ.
    - –†–µ—à–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö > 1.
    """
    print("--- –£–ó–ï–õ: –£–ú–ù–ê–Ø –û–¶–ï–ù–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í ---")
    question = state["question"]
    documents = state["documents"]
    
    if not documents:
        return {**state, "documents": []}

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    filtered_docs = []
    for d in documents:
        grade = relevance_grader.invoke({"question": question, "document": d.page_content})
        if grade.score.lower() == "yes":
            print(f"--- –î–û–ö–£–ú–ï–ù–¢ '{d.metadata.get('source', '')}' –†–ï–õ–ï–í–ê–ù–¢–ï–ù ---")
            filtered_docs.append(d)
        else:
            print(f"--- –î–û–ö–£–ú–ï–ù–¢ '{d.metadata.get('source', '')}' –ù–ï–†–ï–õ–ï–í–ê–ù–¢–ï–ù ---")
    
    # –†–µ—à–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    # –ï—Å–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å "–≥–¥–µ –µ—Å—Ç—å —Ñ–∏–∑–∏–∫–∞?" –Ω–∞—à–ª–æ—Å—å 3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞,
    # —Ç–æ —É—Ç–æ—á–Ω—è—Ç—å –ù–ï –Ω—É–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç.
    # –£—Ç–æ—á–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –±—ã–ª –Ω–µ—á–µ—Ç–∫–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ IT".
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –µ—Å–ª–∏ –Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö, —Ç–æ –¥–µ–ª–∞–µ–º —Å–≤–æ–¥–∫—É.
    clarification_needed = False # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –¥–µ–ª–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
    if len(filtered_docs) > 1:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä,
        # –µ—â–µ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ LLM, —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å "–Ω—É–∂–Ω–æ –ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞?"
        # –ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞, —É–ø—Ä–æ—Å—Ç–∏–º: –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (—Ñ–∏–∑–∏–∫–∞, –±–∞–ª–ª—ã),
        # —Ç–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ. –ï—Å–ª–∏ –æ–±—â–∏–π - –Ω—É–∂–Ω–æ.
        # –î–ª—è –Ω–∞—à–µ–≥–æ –∫–µ–π—Å–∞ "–∫—É–¥–∞ —Å —Ñ–∏–∑–∏–∫–æ–π" - clarification_needed = False
        print("--- –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–≤–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç. ---")

    return {**state, "documents": filtered_docs, "clarification_needed": clarification_needed}


def generate_answer(state: GraphState) -> GraphState:
    """–£–∑–µ–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM, –ò–°–ü–û–õ–¨–ó–£–ï–¢ ORIGINAL_QUESTION."""
    print("--- –£–ó–ï–õ: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê ---")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–•–û–î–ù–´–ô –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞!
    question = state["original_question"]
    documents = state["documents"]

    prompt_template = ChatPromptTemplate.from_template(
        """–¢—ã ‚Äî —á–∞—Ç-–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –ò–†–ò–¢-–†–¢–§.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –Ω–∏–∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
–°–∏–Ω—Ç–µ–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤—Å–µ—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –∏ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ—á–∏—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è), –∞ –∑–∞—Ç–µ–º –æ–ø–∏—à–∏ –¥–µ—Ç–∞–ª–∏.

–ö–û–ù–¢–ï–ö–°–¢:
{context}

–ò–°–•–û–î–ù–´–ô –í–û–ü–†–û–°:
{question}
"""
    )
    
    rag_chain = prompt_template | llm | StrOutputParser()
    context_str = "\n\n---\n\n".join([doc.page_content for doc in documents])
    generation = rag_chain.invoke({"context": context_str, "question": question})
    
    return {**state, "generation": generation}

def generate_clarification(state: GraphState) -> GraphState:
    """
    –£–∑–µ–ª –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    –í–û–ó–í–†–ê–©–ê–ï–¢ –¢–û–õ–¨–ö–û –ú–ê–®–ò–ù–û–ß–ò–¢–ê–ï–ú–´–ô –ú–ê–†–ö–ï–† –ò –°–ü–ò–°–û–ö.
    """
    print("--- –£–ó–ï–õ: –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –£–¢–û–ß–ù–ï–ù–ò–Ø ---")
    documents = state["documents"]
    doc_titles = [doc.metadata.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ") for doc in documents]
    
    # –ù–û–í–´–ô –§–û–†–ú–ê–¢: —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä –∏ –æ–ø—Ü–∏–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏.
    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∞–º –¥–æ–±–∞–≤–∏—Ç –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
    clarification_message = "CLARIFY_OPTIONS:\n" + "\n".join(doc_titles)
    
    return {**state, "generation": clarification_message}


def fallback(state: GraphState) -> GraphState:
    """–£–∑–µ–ª –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."""
    print("--- –£–ó–ï–õ: –û–¢–í–ï–¢-–ó–ê–ì–õ–£–®–ö–ê ---")
    generation = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö: —Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–π —Å—Ç–µ–π—Ç, –ø–æ—Ç–æ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    return {**state, "generation": generation}


# --- –£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞ ---

def decide_next_step(state: GraphState) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    print("--- –£–°–õ–û–í–ò–ï: –ü–†–ò–ù–Ø–¢–ò–ï –†–ï–®–ï–ù–ò–Ø ---")
    if not state["documents"]:
        print("--- –†–ï–®–ï–ù–ò–ï: –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ -> fallback ---")
        return "fallback"
    if state["clarification_needed"]:
        print("--- –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ -> clarify ---")
        return "clarify"
    else:
        print("--- –†–ï–®–ï–ù–ò–ï: –í—Å—ë —è—Å–Ω–æ -> generate ---")
        return "generate"


# --- –°–±–æ—Ä–∫–∞ –≥—Ä–∞—Ñ–∞ ---
workflow = StateGraph(GraphState)

workflow.add_node("retrieve", retrieve_docs)
workflow.add_node("grade_documents", grade_documents)
workflow.add_node("generate", generate_answer)
workflow.add_node("clarify", generate_clarification)
workflow.add_node("fallback", fallback)

workflow.set_entry_point("retrieve")
workflow.add_edge("retrieve", "grade_documents")
workflow.add_conditional_edges(
    "grade_documents",
    decide_next_step,
    {
        "clarify": "clarify",
        "generate": "generate",
        "fallback": "fallback",
    },
)
workflow.add_edge("generate", END)
workflow.add_edge("clarify", END)
workflow.add_edge("fallback", END)

# –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≥—Ä–∞—Ñ –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç
app = workflow.compile()


# --- 4. –ò–ù–¢–ï–†–§–ï–ô–° STREAMLIT (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ï–ô –ö–ù–û–ü–û–ö) ---

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ò–†–ò–¢-–†–¢–§?"}]

# –ö–æ–ª–ª–±—ç–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É—Ç–æ—á–Ω–µ–Ω–∏—è. –û–Ω —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä.
def handle_clarification_click(option_text):
    st.session_state.clarification_choice = option_text

# 1. –ë–õ–û–ö –û–¢–†–ò–°–û–í–ö–ò: –≤—Å–µ–≥–¥–∞ —Ä–∏—Å—É–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        content = message["content"]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –º–∞—Ä–∫–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        if isinstance(content, str) and content.startswith("CLARIFY_OPTIONS:"):
            st.markdown("–Ø –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–µ –∏–∑ –Ω–∏—Ö –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:")
            options = content.split('\n')[1:]
            num_columns = min(len(options), 3)
            cols = st.columns(num_columns)
            for i, option in enumerate(options):
                if option.strip():
                    with cols[i % num_columns]:
                        st.button(
                            option,
                            on_click=handle_clarification_click,
                            args=[option],
                            use_container_width=True,
                            # –ö–ª—é—á —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ –∏—Å—Ç–æ—Ä–∏–∏, —Ç.–∫. –º—ã —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
                            key=f"clarify_btn_{option.replace(' ', '_')}_{i}" 
                        )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —Ä–∏—Å—É–µ–º –µ–≥–æ
            st.markdown(content)

# 2. –ë–õ–û–ö –û–ë–†–ê–ë–û–¢–ö–ò –í–í–û–î–ê

# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Å–¥–µ–ª–∞–Ω –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–æ–π (—ç—Ç–æ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
if prompt_from_button := st.session_state.get("clarification_choice"):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
    st.session_state.clarification_choice = None
    
    # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø –°–¢–ê–†–´–• –ö–ù–û–ü–û–ö ---
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ —Ç–µ–∫—Å—Ç –≤—ã–±–æ—Ä–∞
    for i in range(len(st.session_state.messages) - 1, -1, -1):
        msg = st.session_state.messages[i]
        if msg["role"] == "assistant" and msg["content"].startswith("CLARIFY_OPTIONS:"):
            msg["content"] = f"–í—ã —É—Ç–æ—á–Ω–∏–ª–∏ —Å–≤–æ–π –≤—ã–±–æ—Ä: **{prompt_from_button}**"
            break
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    
    # –î–æ–±–∞–≤–ª—è–µ–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π" –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "user", "content": f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ \"{prompt_from_button}\""})
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    st.rerun()

# –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
if user_input := st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...", key="main_chat_input"):
    st.session_state.messages.append({"role": "user", "content": user_input})
    st.rerun()

# 3. –ë–õ–û–ö –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–ê (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
if st.session_state.messages and st.session_state.messages[-1]["role"] == "user":
    user_question = st.session_state.messages[-1]["content"]
    with st.chat_message("assistant"):
        with st.spinner("–î—É–º–∞—é..."):
            final_state = app.invoke({"question": user_question})
            response = final_state['generation']
            st.session_state.messages.append({"role": "assistant", "content": response})
            st.rerun()